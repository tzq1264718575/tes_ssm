<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace="com.tarena.dao.UserMapper" 全路径接口名 -->
<mapper namespace="com.tarena.dao.UserMapper">
	<select id="login" parameterType="User" resultType="java.lang.String">
		select user_id id from t_user where user_loginname=#{loginName} and user_password=#{password}
	</select>
	<select id="findUserByUserName" parameterType="java.lang.String"
		resultMap="userMap">
		select user_id,user_loginname,user_password from t_user where user_loginname=#{name}		
	</select>
	<resultMap type="Role" id="roleMap">
	    <!-- 注意:从表中的外键id,不能跟主表的主键id名字相同 -->
		<id property="id" column="role_id" />
		<result property="name" column="role_name"/>
	</resultMap>
	<!-- user的resultMap -->
	<resultMap type="User" id="userMap">
		<id property="id" column="user_id" jdbcType="VARCHAR"/>
		<result property="loginName" column="user_loginname" jdbcType="VARCHAR"/>
		<result property="loginType" column="user_logintype" jdbcType="VARCHAR"/>
		<result property="nickName" column="user_nickname" jdbcType="VARCHAR"/>
		<result property="password" column="user_password" jdbcType="VARCHAR"/>
		<result property="type" column="user_type" jdbcType="INTEGER"/>
		<result property="head" column="user_head" jdbcType="VARCHAR"/>
		<result property="score" column="user_score" jdbcType="INTEGER"/>
		<result property="isLock" column="user_islock" jdbcType="CHAR"/>
		<result property="pwdState" column="user_pwdstate" jdbcType="VARCHAR"/>
		<result property="regDate" column="user_regdate" jdbcType="TIMESTAMP"/>
		<result property="age" column="user_age" jdbcType="INTEGER"/>
		<result property="sex" column="user_sex" jdbcType="CHAR"/>
		<result property="introduction" column="user_introduction" jdbcType="VARCHAR"/>
		<collection property="roles" ofType="Role" 
		            javaType="java.util.List"
		            resultMap="roleMap"></collection>
	</resultMap>
	<select id="getCountByRoleType" parameterType="Page" resultType="java.lang.Integer">
		select count(user_id) from
		(select role_id from t_role where role_name like #{roleType}) r
		left join t_user_role ur on r.role_id=ur.rid left join
		(select user_id from t_user where user_loginname like #{userKeyword} or
				user_nickname like #{userKeyword}) u on ur.uid=u.user_id
	</select>
	<select id="getCountByAll" parameterType="Page" resultType="java.lang.Integer">
		SELECT COUNT(t.user_id) FROM (SELECT user_id FROM
		(SELECT user_id FROM t_user WHERE user_loginname LIKE #{userKeyword} OR
				user_nickname LIKE #{userKeyword}) u
		LEFT JOIN t_user_role ur ON u.user_id=ur.uid LEFT JOIN  t_role  r
		 ON ur.rid=r.role_id GROUP BY user_id) t
	</select>
	<select id="findUsersBypage_roleName" parameterType="Page" resultMap="userMap">
		 select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from (select * from t_user where user_loginname like #{userKeyword} or
				user_nickname like #{userKeyword}
		      ) u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id where r.role_name like #{roleType} limit #{begin},#{pageSize}
	</select>
	<select id="findUsersBypage_roleAll" parameterType="Page" resultMap="userMap">
		select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from (select * from t_user where user_loginname like #{userKeyword} or
				user_nickname like #{userKeyword}
		      ) u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id  limit #{begin},#{pageSize}
	</select>
	<!-- 添加用户 -->
	<insert id="addUser" parameterType="User">
		insert into t_user(user_id,user_loginname,user_password,user_nickname,user_age,user_sex,user_head)
		values(#{id},#{loginName},#{password},#{nickName},#{age},#{sex},#{head})
	</insert>
	<!-- 添加用户角色 -->
	<insert id="addUserRole" parameterType="UserRole">
		insert into t_user_role(uid,rid) values(#{userId},#{roleId})
	</insert>
	<select id="findUsers" resultMap="userMap">
		select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from t_user u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id 
	</select>
	
</mapper>

















